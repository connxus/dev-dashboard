{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Weather.svelte",
    "../src/Clock.svelte",
    "../src/Releases.svelte",
    "../src/Box.svelte"
  ],
  "sourcesContent": [
    "<style>\n  .weather-condition h2 {\n    font-size: 2em;\n  }\n  .weather-icon {\n    font-size: 8em;\n    float: right;\n  }\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  import Box from './Box.svelte';\n  import config from './config.js';\n\n  const identifier = 'weather';\n\n  let weather;\n  let weatherIcon = 'fa-sun';\n  const weatherIcons = {\n    'clear-day': 'fa-sun',\n    'clear-night': 'fa-moon',\n    'rain': 'fa-cloud-rain',\n    'snow': 'fa-snowflake',\n    'sleet': 'fa-snowflake',\n    'wind': 'fa-wind',\n    'fog': 'fa-smog',\n    'cloudy': 'fa-cloud',\n    'partly-cloudy-day': 'fa-cloud-sun',\n    'partly-cloudy-night': 'fa-cloud-moon',\n    'hail': 'fa-cloud-showers-heavy',\n    'thunderstorm': 'fa-bolt',\n    'tornado': 'poo-storm'\n  };\n\n  /**\n   * Retrieves the weather details from the server\n   * */\n  function fetchWeather() {\n    return fetch(`${config.apiLocation}/weather`)\n      .then(res => {\n        return res.json();\n      });\n  }\n\n  /**\n   * Calls fetchWeather. Called after the component has mounted itself to the DOM.\n   * */\n  function postMount() {\n    fetchWeather().then(response => {\n      weather = response.currently;\n      weatherIcon = weatherIcons[weather.icon] || 'fa-sun';\n    });\n  }\n\n  /**\n   * Svelte JS Lifecycle hook to trigger function once component is mounted to the DOM.\n   * */\n  onMount(() => {\n    postMount();\n    // request again in 30 minutes\n    setTimeout(postMount, 1000 * 60 * 30);\n  });\n</script>\n\n<Box {identifier}>\n  {#if weather}\n    <section class=\"weather-condition\">\n      <i class=\"weather-icon fas {weatherIcon}\"></i>\n      <h2>{weather.summary}/{parseInt(weather.temperature)}<sup>&deg;</sup></h2>\n      <h4>Mason, OH</h4>\n    </section>\n  {:else}\n    <p class=\"txt-center\">Loading...</p>\n  {/if}\n</Box>",
    "<style>\n  .analog-clock {\n    float: right;\n    height: 150px;\n    width: 150px;\n  }\n\n  .hour-hand {\n    stroke: #CCC;\n  }\n\n  .minute-hand {\n    stroke: #AAA;\n  }\n\n  .major-mark {\n    stroke: #555;\n    stroke-width: 1;\n  }\n\n  .major-mark-0,\n  .major-mark-15,\n  .major-mark-30,\n  .major-mark-45 {\n    stroke: #CCC;\n  }\n\n  .digital-time-output {\n    z-index: 2;\n  }\n\n  .time-output {\n    display: block;\n    font-size: 4em;\n  }\n\n  .time-output span {\n    margin: 0;\n    padding: 0;\n  }\n\n  .date-output {\n    display: block;\n    font-size: 1.3em;\n  }\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  import Box from './Box.svelte';\n\n  const identifier = 'clock';\n\n  let time = new Date();\n\n  let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  // computed time segments updated when `date` changes\n  $: hours = time.getHours();\n  $: minutes = time.getMinutes();\n  $: seconds = time.getSeconds();\n\n  $: day = days[time.getDay()];\n  $: month = months[time.getMonth()];\n  $: date = time.getDate();\n  $: year = time.getFullYear();\n\n  onMount(() => {\n    const interval = setInterval(() => {\n      time = new Date();\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n</script>\n\n<Box {identifier}>\n  <svg class=\"analog-clock\" viewBox=\"-50 -50 100 100\">\n\n    <!-- markers -->\n    {#each [0,5,10,15,20,25,30,35,40,45,50,55] as minuteMarks}\n      <line\n        class=\"major-mark major-mark-{minuteMarks}\"\n        y1=\"30\"\n        y2=\"35\"\n        transform=\"rotate({30 * minuteMarks})\"\n      />\n    {/each}\n\n    <!-- hour hand -->\n    <line\n      class=\"hour-hand\"\n      y1=\"2\"\n      y2=\"-20\"\n      transform=\"rotate({30 * hours + minutes / 2})\"\n    />\n\n    <!-- minute hand -->\n    <line\n      class=\"minute-hand\"\n      y1=\"4\"\n      y2=\"-30\"\n      transform=\"rotate({6 * minutes + seconds / 10})\"\n    />\n\n  </svg>\n\n  <div class=\"digital-time-output\">\n    <div class=\"time-output\">\n      <span class=\"hour\">{hours > 12 ? hours-12 : hours}</span>:<span class=\"minute\">{minutes >= 10 ? minutes : `0${minutes}`}</span>\n      <span class=\"period\">{hours > 12 ? 'PM' : 'AM'}</span>\n    </div>\n    <div class=\"date-output\">\n      <span class=\"day\">{day}</span>,\n      <span class=\"month\">{month}</span>\n      <span class=\"date\">{date}</span>\n      <span class=\"year\">{year}</span>\n    </div>\n  </div>\n</Box>",
    "<style>\n.releases-content {text-align: center}\n.release-desc {\n  width: 250px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.column {\n  float: left;\n  width: 50%;\n}\n.row:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  import Box from './Box.svelte';\n  import config from './config.js';\n\n  const identifier = 'releases';\n\n  let releases = [];\n\n  /**\n   * Retrieves the release details from the server\n   * */\n  function fetchReleases() {\n    return fetch(`${config.apiLocation}/releases`)\n      .then(res => {\n        return res.json();\n      });\n  }\n\n  /**\n   * Calls fetchReleases. Called after the component has mounted itself to the DOM.\n   * */\n  function postMount() {\n    fetchReleases().then(response => {\n      releases = response.data;\n    });\n  }\n\n  /**\n   * Svelte JS Lifecycle hook to trigger function once component is mounted to the DOM.\n   * */\n  onMount(() => {\n    postMount();\n    // request again in 30 minutes\n    setTimeout(postMount, 1000 * 60 * 30);\n  });\n</script>\n\n{#each releases as release}\n  <Box {identifier}>\n    <section class=\"releases-content\">\n      <h2>{release.title}</h2>\n      <center>\n        <p class=\"release-desc\">{release.description}</p>\n        <div class=\"row\">\n          <div class=\"column\">\n            <h1>{release.appIssueCount}</h1>\n            <label>App</label>\n          </div>\n          <div class=\"column\">\n            <h1>{release.apiIssueCount}</h1>\n            <label>Api</label>\n          </div>\n        </div>\n        {#if release.daysLeft > 0}\n          <p>Due in {release.daysLeft} {#if release.daysLeft > 1}Days{:else}Day{/if}</p>\n        {:else}\n          <p>Due Today</p>\n        {/if}\n      </center>\n    </section>\n  </Box>\n{/each}",
    "<style>\n  .layout-box {\n    position: relative;\n    background-color: #303030;\n    border-radius: 15px;\n    padding: 1em;\n  }\n</style>\n\n<script>\n  export let identifier\n</script>\n\n<section class=\"layout-box\" id={identifier}>\n  <slot></slot>\n</section>"
  ],
  "names": [],
  "mappings": "AACE,gCAAkB,CAAC,EAAE,cAAC,CAAC,AACrB,SAAS,CAAE,GAAG,AAChB,CAAC,AACD,aAAa,cAAC,CAAC,AACb,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,KAAK,AACd,CAAC;ACND,aAAa,eAAC,CAAC,AACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,AACd,CAAC,AAED,UAAU,eAAC,CAAC,AACV,MAAM,CAAE,IAAI,AACd,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,MAAM,CAAE,IAAI,AACd,CAAC,AAED,WAAW,eAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,4BAAa,CACb,6BAAc,CACd,6BAAc,CACd,cAAc,eAAC,CAAC,AACd,MAAM,CAAE,IAAI,AACd,CAAC,AAED,oBAAoB,eAAC,CAAC,AACpB,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,GAAG,AAChB,CAAC,AAED,2BAAY,CAAC,IAAI,eAAC,CAAC,AACjB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,OAAO,CAAE,KAAK,CACd,SAAS,CAAE,KAAK,AAClB,CAAC;AC3CH,iBAAiB,eAAC,CAAC,UAAU,CAAE,MAAM,CAAC,AACtC,aAAa,eAAC,CAAC,AACb,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,AACzB,CAAC,AACD,OAAO,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,mBAAI,MAAM,AAAC,CAAC,AACV,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACb,CAAC;ACfC,WAAW,cAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,OAAO,CACzB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,GAAG,AACd,CAAC"
}